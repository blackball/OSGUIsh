/******************************************************************************\
* FocusPolicy.hpp                                                              *
* Interface for policies used to change the focus from one node to another.    *
*                                                                              *
* Copyright (C) 2006-2010 by Leandro Motta Barros.                             *
*                                                                              *
* This program is distributed under the OpenSceneGraph Public License. You     *
* should have received a copy of it with the source distribution, in a file    *
* named 'COPYING.txt'.                                                         *
\******************************************************************************/

#ifndef _OSGUISH_FOCUS_POLICY_HPP_
#define _OSGUISH_FOCUS_POLICY_HPP_

#include <boost/shared_ptr.hpp>
#include <osgGA/GUIEventAdapter>
#include <OSGUIsh/Types.hpp>


namespace OSGUIsh
{
   /** An abstract class defining an interface used to implement different
    *  policies for changing focus from one node to another.
    */
   class FocusPolicy
   {
      public:
         /** Constructs a \c FocusPolicy.
          *  @param focusedNode The node with focus. A \c FocusPolicy will keep
          *         this pointing to the node that has the focus.
          */
         FocusPolicy (NodePtr& focusedNode);

         /** Concrete subclasses of \c FocusPolicy will implement this so that
          *  \c setFocusedNode() is called whenever it is necessary to change
          *  the focus according to the policy.
          *  <p>This is called for every event arriving via Producer, after the
          *  signals are called.
          *  @param ea The event generated by Producer.
          *  @param nodeUnderMouse The node under the mouse pointer.
          */
         virtual void updateFocus (const osgGA::GUIEventAdapter& ea,
                                   const NodePtr nodeUnderMouse) = 0;

      protected:
         /// Updates the focused node.
         void setFocusedNode (NodePtr focusedNode)
         { focusedNode_ = focusedNode; }

      private:
         /** A reference to the focused node. The policy will make this point to
          *  the proper node, the one that has the focus according to the
          *  policy.
          */
         NodePtr& focusedNode_;
   };



   /// A (smart) pointer to a \c FocusPolicy.
   typedef boost::shared_ptr<FocusPolicy> FocusPolicyPtr;



   /** An abstract class defining an interface for creating
    *  <tt>FocusPolicy</tt>s.
    */
   class FocusPolicyFactory
   {
      public:
         /** Concrete subclasses should implement this so that a newly created
          *  \c FocusPolicy is returned.
          *  @param focusedNode A pointer to a node; the created policy will
          *         keep it pointing to the focused node.
          */
         virtual FocusPolicyPtr create (NodePtr& focusedNode) const = 0;
   };



   /** A template class used to generate <tt>FocusPolicyFactory</tt>s (hence the
    *  template name: factories are constructed by masons).
    *  @param T A <tt>FocusPolicy</tt>-derived class, the one that will be
    *         created by the generated factory.
    */
   template <class T>
   class FocusPolicyFactoryMason: public FocusPolicyFactory
   {
      public:
         // (inherits docs)
         virtual FocusPolicyPtr create (NodePtr& focusedNode) const
         {
            return FocusPolicyPtr (new T(focusedNode));
         }
   };

} // namespace OSGUIsh

#endif // _OSGUISH_FOCUS_POLICY_HPP_
